generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  name      String
  image     String?
  email     String      @unique
  password  String
  expenses  Expense[]
  partyBill PartyBill[]
  tags      Tag[]
  wallet    Wallet[]
}

model Wallet {
  id          String    @id @default(uuid())
  name        String
  description String?
  balance     Int       @default(0)
  userId      String
  expenses    Expense[]
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Expense {
  id          String       @id @default(uuid())
  title       String
  description String
  total       Int
  type        ExpenseType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  walletId    String
  date        DateTime
  user        User         @relation(fields: [userId], references: [id])
  wallet      Wallet       @relation(fields: [walletId], references: [id])
  expenseTag  ExpenseTag[]

  @@index([userId])
  @@index([date])
}

model Tag {
  id         String       @id @default(uuid())
  name       String
  userId     String
  expenseTag ExpenseTag[]
  user       User         @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ExpenseTag {
  id        String  @id @default(uuid())
  expenseId String
  tagId     String
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id])
}

model PartyBill {
  id                String        @id @default(uuid())
  billPublicId String @unique
  date              DateTime
  name              String
  userId            String
  serviceChargeFlag Boolean
  vatFlag           Boolean
  bank              String
  bankNumber        String
  promptpay         String
  qrcode            String
  paymentMethod     PaymentMethod
  billMembers       BillMembers[]
  billMenus         BillMenus[]
  user              User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([date])
  @@index([billPublicId])
}

model BillMenus {
  id           String        @id @default(uuid())
  name         String
  quantity     Int
  pricePerItem Int
  partyBillId  String
  partyBill    PartyBill     @relation(fields: [partyBillId], references: [id], onDelete: Cascade)
  memberMenus  MemberMenus[]
}

model BillMembers {
  id          String              @id @default(uuid())
  name        String
  partyBillId String
  status      MemberPaymentStatus @default(idle)
  partyBill   PartyBill           @relation(fields: [partyBillId], references: [id], onDelete: Cascade)
  memberMenus MemberMenus[]
}

model MemberMenus {
  id            String      @id @default(uuid())
  quantity      Int
  billMembersId String
  billMenuId    String
  billMembers   BillMembers @relation(fields: [billMembersId], references: [id], onDelete: Cascade)
  billMenu      BillMenus   @relation(fields: [billMenuId], references: [id], onDelete: Cascade)
}

enum ExpenseType {
  e
  i
}

enum PaymentMethod {
  bank
  promptpay
  qrcode
}

enum MemberPaymentStatus {
  paid
  idle
}
